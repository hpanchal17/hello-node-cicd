name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Runs when code is pushed to 'main' branch

env:
  AWS_REGION: "eu-north-1"
  AWS_ACCOUNT_ID: "490004653145"
  ECR_REPO: "hello-node-app"
  CONTAINER_PORT: 8000
  HOST_PORT: 8000

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up AWS CLI
        run: |
          sudo apt-get update && sudo apt-get install -y awscli

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        run: |
          IMAGE_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}"
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $IMAGE_NAME

      - name: Build Docker Image
        run: |
          IMAGE_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}"
          docker build -t $ECR_REPO .
          docker tag $ECR_REPO:latest $IMAGE_NAME:latest

      - name: Push Docker Image to AWS ECR
        run: |
          IMAGE_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}"
          docker push $IMAGE_NAME:latest

      - name: Deploy to EC2
        run: |
          IMAGE_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}"
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            
            echo "Connected to EC2"

            # Authenticate EC2 instance with AWS ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $IMAGE_NAME

            # Stop and remove old container
            OLD_CONTAINER_ID=\$(docker ps -q --filter "ancestor=$IMAGE_NAME:latest")
            if [ -n "\$OLD_CONTAINER_ID" ]; then
                echo "Stopping and removing old container..."
                docker stop \$OLD_CONTAINER_ID && docker rm \$OLD_CONTAINER_ID
            fi

            # Pull latest image
            docker pull $IMAGE_NAME:latest

            # Run new container
            docker run -d -p $HOST_PORT:$CONTAINER_PORT $IMAGE_NAME:latest

            echo "Deployment Completed Successfully!"
        

      - name: Cleanup
        run: rm -f private_key.pem
